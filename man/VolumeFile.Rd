% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-VolumeFile.R
\name{VolumeFile}
\alias{VolumeFile}
\title{R6 Class representing a VolumeFile}
\description{
R6 Class representing a resource for managing VolumeFile objects.
}
\section{Super class}{
\code{\link[sevenbridges2:Item]{sevenbridges2::Item}} -> \code{VolumeFile}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{URL}}{URL endpoint fields}

\item{\code{location}}{File/prefix location on the volume.}

\item{\code{type}}{Type of resource - can be either FILE or PREFIX.}

\item{\code{storage_type}}{Type of storage (cloud provider). Can be one of:
's3', 'gcs', 'azure', 'OSS'.}

\item{\code{volume}}{Volume id.}

\item{\code{metadata}}{File's metadata if exists.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VolumeFile-new}{\code{VolumeFile$new()}}
\item \href{#method-VolumeFile-print}{\code{VolumeFile$print()}}
\item \href{#method-VolumeFile-reload}{\code{VolumeFile$reload()}}
\item \href{#method-VolumeFile-list_files}{\code{VolumeFile$list_files()}}
\item \href{#method-VolumeFile-import}{\code{VolumeFile$import()}}
\item \href{#method-VolumeFile-clone}{\code{VolumeFile$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-new"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-new}{}}}
\subsection{Method \code{new()}}{
Create a new VolumeFile object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$new(res = NA, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{res}}{Response containing VolumeFile object info.}

\item{\code{...}}{Other arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-print"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-print}{}}}
\subsection{Method \code{print()}}{
Print method for VolumeFile class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-reload"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-reload}{}}}
\subsection{Method \code{reload()}}{
Reload VolumeFile.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$reload(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Other query parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
VolumeFile
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-list_files"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-list_files}{}}}
\subsection{Method \code{list_files()}}{
List volume folder contents
This call lists the contents of a specific volume folder.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$list_files(
  limit = getOption("sevenbridges2")$limit,
  continuation_token = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{Defines the number of items you want to get from your API
request. By default, \code{limit} is set to \code{50}. Maximum is \code{100}.}

\item{\code{continuation_token}}{Continuation token received to use for next
chunk of results. Behaves similarly like offset parameter.}

\item{\code{...}}{Other parameters that can be passed to api() function, like
fields for example. With fields parameter you can specify a subset of
fields to include in the response. You can use: \code{href}, \code{location},
\code{volume}, \code{type}, \code{metadata}, \verb{_all}. Default: \verb{_all}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
VolumeFileCollection object containing list of VolumeFile
objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-import"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-import}{}}}
\subsection{Method \code{import()}}{
This call lets you queue a job to import this file or folder
from a volume into a project on the Platform.
Essentially, you are importing an item from your cloud storage provider
(Amazon Web Services, Google Cloud Storage, Azure or Ali Cloud) via the
volume onto the Platform.
If successful, an alias will be created on the Platform. Aliases appear
on the Platform and can be copied, executed, and modified as such.
They refer back to the respective item on the given volume.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$import(
  destination_project = NULL,
  destination_parent = NULL,
  name = NULL,
  overwrite = FALSE,
  autorename = FALSE,
  preserve_folder_structure = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{destination_project}}{String destination project id or Project
object. Not required, but either \code{destination_project} or
\code{destination_parent} directory must be provided.}

\item{\code{destination_parent}}{String folder id or File object
(with type = 'FOLDER'). Not required, but either \code{destination_project}
or \code{destination_parent} directory must be provided.}

\item{\code{name}}{The name of the alias to create. This name should be unique
to the project.
If the name is already in use in the project, you should
use the \code{overwrite} query parameter in this call to force any item with
that name to be deleted before the alias is created.
If name is omitted, the alias name will default to the last segment of
the complete location (including the prefix) on the volume.

Segments are considered to be separated with forward slashes /.
Allowed characters in file names are all alphanumeric and special
characters except forward slash /, while folder names can contain
alphanumeric and special characters _, - and ..}

\item{\code{overwrite}}{Boolean. Whether to overwrite the item if another one
with the same name already exists at the destination.
Bear in mind that if used with folders import, the folder's content
(files with the same name) will be overwritten, not the whole folder.}

\item{\code{autorename}}{Boolean. Whether to automatically rename the item
(by prefixing its name with an underscore and number) if another one
with the same name already exists at the destination.
Bear in mind that if used with folders import, the folder content will
be renamed, not the whole folder.}

\item{\code{preserve_folder_structure}}{Boolean. Whether to keep the exact
source folder structure. The default value is true if the item being
imported is a folder. Should not be used if you are importing a file.
Bear in mind that if you use preserve_folder_structure = FALSE, that the
response will be the parent folder object containing imported files
alongside with other files if they exist.}

\item{\code{...}}{Other arguments that can be passed to api() function
like 'fields', etc.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Import job object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VolumeFile-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VolumeFile-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VolumeFile$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
